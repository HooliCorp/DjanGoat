IMPORT io.shiftleft/default
IMPORT io.shiftleft/defaultdict

################################
# Sinks that are protected by Rapid7 tcell
################################

###############################################################################
# Category Open Redirect #
###############################################################################

IO tcell_protected = METHOD -f "django.shortcuts.redirect:typing.Union[django.http.response.HttpResponseRedirect,django.http.response.HttpResponsePermanentRedirect](to:typing.Union[typing.Callable,builtins.str,django.shortcuts.SupportsGetAbsoluteUrl],*args:typing.Any,permanent:builtins.bool,**kwargs:typing.Any)" { INST "DESCRIPTOR_USE", PAR -i 1 "SINK", PAR -i 2 "SINK", PAR -i 4 "SINK" }

CONCLUSION open-redirect-tcell = FLOW IO (http OR $http) -> DATA (NOT escaped AND NOT numeric) -> IO (tcell_protected) -> IO ((http OR $http) AND redirect)
WHEN CONCLUSION open-redirect-tcell => EMIT {
  title: "Open Redirect: HTTP Request parameters are used in HTTP redirects {{via `$paramname`}} {{in `$methodname`}}",
  description: "HTTP Request parameters are not escaped and used in a HTTP redirect. This indicates an open redirect which can be exploited by an attacker to launch phishing attacks and/or steal sensitive data.

## Rapid7 tCell protection

Open Redirect detection is part of tCell's App Firewall feature and is enabled by default. Your application is only allowed to redirect to domains in the Allowed Domains list. All of the observed redirect attempts, successful or not, are in the Excluded Domains list. If the HTTP Redirect feature is set to Block and Report then the attempt would be blocked.

**[HTTP Redirect Detection](https://docs.tcell.io/docs/http-redirect)**

## Countermeasures

 This vulnerability can be prevented by ensuring that users cannot arbitrarily control where your page redirects them to.

## Additional information

**[CWE-601](https://cwe.mitre.org/data/definitions/601.html)**

**[OWASP-A1](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A1-Injection)**",
  category: "a1-injection",
  score: "2.0",
  vulnerability_description: "Open Redirect (Protected)",
  owasp_link: "https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A1-Injection",
  link: "https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A1-Injection",
  cwe_link: "https://cwe.mitre.org/data/definitions/601.html",
  cwe_category: "601"
}

###############################################################################
# Category Remote Code Execution #
###############################################################################

IO tcell_protected = METHOD -f "os.system:builtins.int(command:os.AnyPath)" { PAR -i 1 "SINK" }

CONCLUSION command-injection-http-tcell = FLOW IO (http) -> DATA (NOT attacker-controlled AND NOT encrypted AND NOT hashed AND NOT encoded AND NOT escaped AND NOT numeric) -> IO (tcell_protected) -> IO (execute)
WHEN CONCLUSION command-injection-http-tcell => EMIT {
  title: "Remote Code Execution: Command Injection through HTTP {{via `$paramname`}} {{in `$methodname`}}",
  description: "HTTP data is used in a shell command without undergoing escaping or validation. This could allow an attacker to execute code on the server. Injection flaws occur when untrusted data is sent to an interpreter as part of a command or query. By injecting hostile data, an attacker may trick the interpreter into executing unintended commands or accessing data without authorization which can result in data loss, corruption, or disclosure to unauthorized parties, loss of accountability, denial of access or even a complete host takeover.

## Rapid7 tCell protection

Rapid7 tCell can detect and block successful command injection attacks. It instruments your application and monitor the commands it issues to the host operating system.

**[Command Injection](https://docs.tcell.io/docs/command-injection)**

## Countermeasures

This vulnerability can be prevented by using parameterized queries or by validating HTTP data (preferably on server-side by means of common input sanitation libraries or whitelisting) before using it.

## Additional information

**[CWE-77](https://cwe.mitre.org/data/definitions/77.html)**

**[CWE-78](https://cwe.mitre.org/data/definitions/78.html)**

**[CWE-917](https://cwe.mitre.org/data/definitions/917.html)**

**[OWASP-A1](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A1-Injection)**",
  category: "a1-injection",
  score: "2.0",
  vulnerability_description: "Remote Code Execution (Protected)",
  owasp_link: "https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A1-Injection",
  link: "https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A1-Injection",
  cwe_link: "https://cwe.mitre.org/data/definitions/77.html",
  cwe_link: "https://cwe.mitre.org/data/definitions/78.html",
  cwe_link: "https://cwe.mitre.org/data/definitions/917.html",
  cwe_category: "77",
  cwe_category: "78",
  cwe_category: "917"
}
